name: dev-setup
version: 2020-02-28

parameters:
  - name: username
    description: The system username
    type: string
    short: '-uUSERNAME'
    long: '--username=USERNAME'
    required: true

actions:
  - description: Update OS X and Software
    flag: softwareupdate
    type: shell
    up: softwareupdate --install --recommended --all
    down: echo 'Software updates are not reversible'
    test: exit 1 # always execute
    user: root

  - description: Enable Filevault Encryption
    flag: filevault
    type: shell
    up: fdesetup enable -user ${parameters:username}
    down: fdesetup disable -user ${parameters:username}
    test: fdesetup status | grep -i 'FileVault is On'
    user: root

  - description: Install XCode Command Line Tools
    flag: xcodecli
    type: shell
    up: >
      softwareupdate --reset-ignored;
      xcode-select --install;
      softwareupdate -i "$(softwareupdate -l | grep '*.*Command Line' | head -n 1 | awk -F'*' '{print $2}' | sed -e 's/^ *//' | tr -d '\n')"
    down: sudo rm -rf /Library/Developer/CommandLineTools
    test: xcode-select -p

  - description: Enable Slow-mo Animations
    flag: slowmo
    type: shell
    up: defaults write com.apple.dock slow-motion-allowed -bool YES && killall Dock
    down: defaults write com.apple.dock slow-motion-allowed -bool NO && killall Dock
    test: defaults read com.apple.dock slow-motion-allowed | grep 1

  - description: Show Battery Percentage
    flag: batterypercentage
    type: shell
    up: defaults write com.apple.menuextra.battery ShowPercent -bool YES && killall SystemUIServer
    down: defaults write com.apple.menuextra.battery ShowPercent -bool NO && killall SystemUIServer
    test: defaults read com.apple.menuextra.battery ShowPercent | grep 1

  - description: Create a Vim Init File
    flag: vimrc
    type: file
    content: |
      syntax on
      autocmd Filetype gitcommit setlocal spell textwidth=72
    path: ~/.vimrc
    permissions: 0644

  - description: Install Homebrew
    flag: homebrew-install
    type: shell
    up: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    down: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"
    test: which brew

  - description: Create a Source Directory
    flag: srcdirectory
    type: shell
    up: mkdir ~/src
    down: rm -rf ~/src
    test: "file ~/src | grep 'src: directory'"

  - description: Generate Base Brewfile
    flag: brewfile-base
    type: file
    content: |
      tap "homebrew/cask"
      tap "aws/tap"
      tap "homebrew/cask-versions"
      tap "cartr/qt4"
      brew "git"
      brew "gnupg"
      brew "redis"
      brew "python3"
      brew "pipenv"
      brew "cookiecutter"
      brew "rbenv"
      brew "postgresql"
      brew "nginx"
      brew "node"
      brew "yarn"
      brew "nvm"
      brew "fortune"
      brew "flow"
      brew "watchman"
      brew "awscli"
      brew "aws-sam-cli"
      brew "pow"
      brew "terraform"
      brew "ansible"
      brew "qt@4"
      brew "qt-webkit@2.3"
      cask "atom"
      cask "clipy"
      cask "coconutbattery"
      cask "dash"
      cask "visual-studio-code"
      cask "react-native-debugger"
      cask "gitify"
      cask "docker"
      cask "postman"
      cask "slack"
      cask "android-studio"
      cask "iterm2"
      cask "dropbox"
      cask "homebrew/cask-versions/adoptopenjdk8"
      cask "microsoft-office"
      cask "microsoft-teams"
      cask "google-chrome"
    path: '~/src/Brewfile'
    permissions: 0644

  - description: Install Homebrew Dependencies
    flag: homebrew-dependencies
    type: shell
    up: brew bundle install --file=/Users/${parameters:username}/src/Brewfile
    down: brew bundle cleanup --file=/Users/${parameters:username}/src/Brewfile
    test: brew bundle check --file=/Users/${parameters:username}/src/Brewfile

  - description: Enable Homebrew Services
    flag: homebrew-services
    type: shell
    up: >
      brew services start redis;
      brew services start postgresql;
    down: >
      brew services stop redis;
      brew services stop postgresql;
    test: >
      brew services list | grep redis | awk '{print $2}' | grep started &&
      brew services list | grep postgresql | awk '{print $2}' | grep started

  - description: Install Oh My Zsh
    flag: ohmyzsh
    type: shell
    up: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    down: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/uninstall.sh)"
    test: "file ~/.oh-my-zsh | grep 'oh-my-zsh: directory'"
  # NOTE: The following action may error until android stuido has been opened and installation
  # has been completed

  - description: Accept Android SDK Licenses
    flag: android/licenses
    type: shell
    up: yes | sudo /Users/${parameters:username}/Library/Android/sdk/tools/bin/sdkmanager --licenses
    down: echo 'Cannot undo android license acceptance'
    test: exit 1 # always run

  - description: update pow for modern node
    flag: pow/node
    type: shell
    up: sed -i '' 's/util.puts/console.log/g' /usr/local/Cellar/pow/0.6.0/libexec/lib/*.js
    down: sed -i '' 's/console.log/util.puts/g' /usr/local/Cellar/pow/0.6.0/libexec/lib/*.js
    test: exit 1 # always run

  - description: git clone powprox
    flag: powprox/clone
    type: shell
    up: cd ~/src && git clone git@github.com:basecamp/powprox.git
    down: rm -fR ~/src/powprox
    test: "file ~/src/powprox | grep 'powprox: directory'"

  - description: set up powprox
    flag: powprox/config
    type: shell
    up: cd ~/src/powprox && bin/powprox
    down: rm -fR ~/src/.powprox
    test: "file ~/.powprox | grep '.powprox: directory'"

  - description: trust powprox ssl cert
    flag: powprox/trustcert
    type: shell
    up: sudo security add-trusted-cert -d -r trustAsRoot -k /Library/Keychains/System.keychain  ~/.powprox/ssl/certs/pow-server.crt
    down: sudo security delete-certificate -c 'Pow development root' -t
    test: "security find-certificate -c 'Pow development root' | grep 'Pow development root'"

  - description: add powprox certs to openssl 1.1
    flag: powprox/openssl1.0
    type: shell
    up: mkdir -p /usr/local/opt/openssl@1.1/certs && cp ~/.powprox/ssl/certs/*.pem /usr/local/opt/openssl@1.1/certs && /usr/local/opt/openssl/bin/c_rehash
    down: rm /usr/local/opt/openssl@1.1/certs/*.pem && /usr/local/opt/openssl@1.0/bin/c_rehash
    test: "file /usr/local/opt/openssl@1.1 | grep 'No such file or directory'"

  - description: add powprox certs to openssl 1.0
    flag: powprox/openssl1.0
    type: shell
    up: mkdir -p /usr/local/opt/openssl/certs && cp ~/.powprox/ssl/certs/*.pem /usr/local/opt/openssl/certs && /usr/local/opt/openssl@1.0/bin/c_rehash
    down: rm /usr/local/opt/openssl/certs/*.pem && /usr/local/opt/openssl@1.0/bin/c_rehash
    test: "file /usr/local/opt/openssl@1.0 | grep 'No such file or directory'"
